// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VehicleStoreClient is the client API for VehicleStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VehicleStoreClient interface {
	GetVehicle(ctx context.Context, in *VehicleVIN, opts ...grpc.CallOption) (*Vehicle, error)
	CreateVehicle(ctx context.Context, in *Vehicle, opts ...grpc.CallOption) (*Vehicle, error)
	UpdateVehicle(ctx context.Context, in *Vehicle, opts ...grpc.CallOption) (*Vehicle, error)
	DeleteVehicle(ctx context.Context, in *VehicleVIN, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListVehicles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (VehicleStore_ListVehiclesClient, error)
	SearchVehicles(ctx context.Context, in *VehicleQuery, opts ...grpc.CallOption) (VehicleStore_SearchVehiclesClient, error)
}

type vehicleStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewVehicleStoreClient(cc grpc.ClientConnInterface) VehicleStoreClient {
	return &vehicleStoreClient{cc}
}

func (c *vehicleStoreClient) GetVehicle(ctx context.Context, in *VehicleVIN, opts ...grpc.CallOption) (*Vehicle, error) {
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, "/vehicle.VehicleStore/GetVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleStoreClient) CreateVehicle(ctx context.Context, in *Vehicle, opts ...grpc.CallOption) (*Vehicle, error) {
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, "/vehicle.VehicleStore/CreateVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleStoreClient) UpdateVehicle(ctx context.Context, in *Vehicle, opts ...grpc.CallOption) (*Vehicle, error) {
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, "/vehicle.VehicleStore/UpdateVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleStoreClient) DeleteVehicle(ctx context.Context, in *VehicleVIN, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/vehicle.VehicleStore/DeleteVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleStoreClient) ListVehicles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (VehicleStore_ListVehiclesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VehicleStore_serviceDesc.Streams[0], "/vehicle.VehicleStore/ListVehicles", opts...)
	if err != nil {
		return nil, err
	}
	x := &vehicleStoreListVehiclesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VehicleStore_ListVehiclesClient interface {
	Recv() (*Vehicle, error)
	grpc.ClientStream
}

type vehicleStoreListVehiclesClient struct {
	grpc.ClientStream
}

func (x *vehicleStoreListVehiclesClient) Recv() (*Vehicle, error) {
	m := new(Vehicle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vehicleStoreClient) SearchVehicles(ctx context.Context, in *VehicleQuery, opts ...grpc.CallOption) (VehicleStore_SearchVehiclesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VehicleStore_serviceDesc.Streams[1], "/vehicle.VehicleStore/SearchVehicles", opts...)
	if err != nil {
		return nil, err
	}
	x := &vehicleStoreSearchVehiclesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VehicleStore_SearchVehiclesClient interface {
	Recv() (*Vehicle, error)
	grpc.ClientStream
}

type vehicleStoreSearchVehiclesClient struct {
	grpc.ClientStream
}

func (x *vehicleStoreSearchVehiclesClient) Recv() (*Vehicle, error) {
	m := new(Vehicle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VehicleStoreServer is the server API for VehicleStore service.
// All implementations must embed UnimplementedVehicleStoreServer
// for forward compatibility
type VehicleStoreServer interface {
	GetVehicle(context.Context, *VehicleVIN) (*Vehicle, error)
	CreateVehicle(context.Context, *Vehicle) (*Vehicle, error)
	UpdateVehicle(context.Context, *Vehicle) (*Vehicle, error)
	DeleteVehicle(context.Context, *VehicleVIN) (*emptypb.Empty, error)
	ListVehicles(*emptypb.Empty, VehicleStore_ListVehiclesServer) error
	SearchVehicles(*VehicleQuery, VehicleStore_SearchVehiclesServer) error
	mustEmbedUnimplementedVehicleStoreServer()
}

// UnimplementedVehicleStoreServer must be embedded to have forward compatible implementations.
type UnimplementedVehicleStoreServer struct {
}

func (UnimplementedVehicleStoreServer) GetVehicle(context.Context, *VehicleVIN) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicle not implemented")
}
func (UnimplementedVehicleStoreServer) CreateVehicle(context.Context, *Vehicle) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVehicle not implemented")
}
func (UnimplementedVehicleStoreServer) UpdateVehicle(context.Context, *Vehicle) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicle not implemented")
}
func (UnimplementedVehicleStoreServer) DeleteVehicle(context.Context, *VehicleVIN) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVehicle not implemented")
}
func (UnimplementedVehicleStoreServer) ListVehicles(*emptypb.Empty, VehicleStore_ListVehiclesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVehicles not implemented")
}
func (UnimplementedVehicleStoreServer) SearchVehicles(*VehicleQuery, VehicleStore_SearchVehiclesServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchVehicles not implemented")
}
func (UnimplementedVehicleStoreServer) mustEmbedUnimplementedVehicleStoreServer() {}

// UnsafeVehicleStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VehicleStoreServer will
// result in compilation errors.
type UnsafeVehicleStoreServer interface {
	mustEmbedUnimplementedVehicleStoreServer()
}

func RegisterVehicleStoreServer(s grpc.ServiceRegistrar, srv VehicleStoreServer) {
	s.RegisterService(&_VehicleStore_serviceDesc, srv)
}

func _VehicleStore_GetVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehicleVIN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleStoreServer).GetVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vehicle.VehicleStore/GetVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleStoreServer).GetVehicle(ctx, req.(*VehicleVIN))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleStore_CreateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vehicle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleStoreServer).CreateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vehicle.VehicleStore/CreateVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleStoreServer).CreateVehicle(ctx, req.(*Vehicle))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleStore_UpdateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vehicle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleStoreServer).UpdateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vehicle.VehicleStore/UpdateVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleStoreServer).UpdateVehicle(ctx, req.(*Vehicle))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleStore_DeleteVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehicleVIN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleStoreServer).DeleteVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vehicle.VehicleStore/DeleteVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleStoreServer).DeleteVehicle(ctx, req.(*VehicleVIN))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleStore_ListVehicles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VehicleStoreServer).ListVehicles(m, &vehicleStoreListVehiclesServer{stream})
}

type VehicleStore_ListVehiclesServer interface {
	Send(*Vehicle) error
	grpc.ServerStream
}

type vehicleStoreListVehiclesServer struct {
	grpc.ServerStream
}

func (x *vehicleStoreListVehiclesServer) Send(m *Vehicle) error {
	return x.ServerStream.SendMsg(m)
}

func _VehicleStore_SearchVehicles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VehicleQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VehicleStoreServer).SearchVehicles(m, &vehicleStoreSearchVehiclesServer{stream})
}

type VehicleStore_SearchVehiclesServer interface {
	Send(*Vehicle) error
	grpc.ServerStream
}

type vehicleStoreSearchVehiclesServer struct {
	grpc.ServerStream
}

func (x *vehicleStoreSearchVehiclesServer) Send(m *Vehicle) error {
	return x.ServerStream.SendMsg(m)
}

var _VehicleStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vehicle.VehicleStore",
	HandlerType: (*VehicleStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVehicle",
			Handler:    _VehicleStore_GetVehicle_Handler,
		},
		{
			MethodName: "CreateVehicle",
			Handler:    _VehicleStore_CreateVehicle_Handler,
		},
		{
			MethodName: "UpdateVehicle",
			Handler:    _VehicleStore_UpdateVehicle_Handler,
		},
		{
			MethodName: "DeleteVehicle",
			Handler:    _VehicleStore_DeleteVehicle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListVehicles",
			Handler:       _VehicleStore_ListVehicles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchVehicles",
			Handler:       _VehicleStore_SearchVehicles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vehicle.proto",
}
